### rupa/z
Execute (returns a list):
  let output = teleport#parse_output#z([])
  silent AssertEqual v:t_list, type(output)

Execute (parses each line into a dictionary):
  let output = teleport#parse_output#z([
    \   '0.12345678 /some/file'
    \ ])

  silent AssertEqual 1, len(output)

  let expected = { 'directory': '/some/file', 'frecency': 0.12345678 }
  silent AssertEqual expected, output[0]

Execute (orders the output by frecency):
  let output = teleport#parse_output#z([
    \   '0.012367   /first/file',
    \   '0.123      /second/file',
    \   '0.23456789 /third/file',
    \ ])

  silent AssertEqual '/third/file', output[0].directory
  silent AssertEqual '/second/file', output[1].directory
  silent AssertEqual '/first/file', output[2].directory

# Sometimes the list will begin with:
# common: /some/file/path
# That information is already obvious from frecency.
Execute (ignores suggestions for common directories):
  let output = teleport#parse_output#z([
    \   'common:    /first/file',
    \   '0.555      /second/file',
    \   '555.123    /first/file',
    \ ])

  silent AssertEqual 2, len(output)
  silent AssertEqual '/first/file', output[0].directory

### autojump
Execute (removes duplicates):
  let output = teleport#parse_output#autojump('prefix', [
    \   'prefix__1__/path/to/duplicate',
    \   'prefix__2__/path/to/duplicate',
    \   'prefix__3__/path/to/duplicate',
    \ ])

  AssertEqual [{ 'frecency': 1.0, 'directory': '/path/to/duplicate' }], output

Execute (removes intermingled duplicates):
  let output = teleport#parse_output#autojump('prefix', [
  \   'prefix__1__/first',
  \   'prefix__2__/second',
  \   'prefix__3__/first',
  \   'prefix__4__/third',
  \ ])

  let expected = [{ 'frecency': 3.0, 'directory': '/first' }]
  call add(expected, { 'frecency': 2.0, 'directory': '/second' })
  call add(expected, { 'frecency': 1.0, 'directory': '/third' })
  AssertEqual expected, output

### zoxide
Execute (parses out the score):
  let output = teleport#parse_output#zoxide([
  \   '   3 /first',
  \   '   2 /second',
  \   '   2 /third',
  \   '   0 /fourth',
  \ ])

  let expected = [{ 'frecency': 3.0, 'directory': '/first' }]
  call add(expected, { 'frecency': 2.0, 'directory': '/second' })
  call add(expected, { 'frecency': 2.0, 'directory': '/third' })
  call add(expected, { 'frecency': 0.0, 'directory': '/fourth' })
  AssertEqual expected, output

Execute (returns an empty list when no results are found):
  let output = teleport#parse_output#zoxide([])

  AssertEqual [], output
