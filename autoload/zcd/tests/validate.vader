Before (reset drivers):
  let drivers = {}
  let drivers.zoxide = { 'mock': 'zoxide driver' }
  let drivers['z.lua'] = { 'mock': 'z.lua driver' }
  let drivers.test = zcd#drivers#test#()
  let zcd#test_driver#is_supported = v:true

  unlet! zcd#path
  unlet! zcd#driver

" --- driver ---
Execute (returns the driver):
  let zcd#driver = 'zoxide'
  AssertEqual 'zoxide', zcd#validate#driver(drivers)

Execute (returns null if the driver is invalid):
  let zcd#driver = 'bacon'
  silent AssertEqual 'ERROR', zcd#validate#driver(drivers)

Execute (returns null if the driver is null):
  let zcd#driver = v:null
  AssertEqual v:null, zcd#validate#driver(drivers)

" --- path ---
Execute (returns null if the path is unset):
  AssertEqual v:null, zcd#validate#path()

Execute (returns the path if it's readable):
  let zcd#path = expand('%:p:h') . '/README.md'
  AssertEqual zcd#path, zcd#validate#path()

Execute (returns null if the path is invalid):
  let zcd#path = expand('%:p:h')
  silent AssertEqual 'ERROR', zcd#validate#path()

" --- support ---
Execute (returns the driver when supported):
  let zcd#test_driver#is_supported = v:true
  AssertEqual 'test', zcd#validate#support('test', drivers)

Execute (returns null when the driver is not supported):
  let zcd#test_driver#is_supported = v:false
  silent AssertEqual v:null, zcd#validate#support('test', drivers)
