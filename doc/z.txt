*z.vim*     Teleport around your filesystem, but, like... in vim.

Author:   Jesse Gibson <JesseTheGibson@gmail.com>
Homepage: https://github.com/PsychoLlama/z.vim
License:  MIT
Tags:     *z* *z.sh*

==============================================================================
CONTENTS                                                                 *z-toc*

  1. Overview                                                       |z-overview|
  2. Config                                                           |z-config|
  3. Functions                                                     |z-functions|
  4. Changelog                                                     |z-changelog|

==============================================================================
1. Overview                                                         *z-overview*

If you're reading this, you probably use `z` to jump around your file system.
It's a magical experience, and probably one of my favorite CLI tools. If you
don't use it, I highly recommend checking it out, even without this plugin:
https://github.com/rupa/z

It's a critical part of my CLI workflow, and I wanted that same magic for vim.

Say you've got a project named `drone-security-guard/`. Normally to reach this
project you'd write >

  $ z drone

and it figures out what you mean and jumps into the directory. This plugin
works much the same: >

  :Z drone

The command above will open the `drone-security-guard/` directory using
whatever directory browser you've got configured.

Note: I use netrw for navigation because it's awesome. This should work for
NERDTree too, but I never test against it.

Pro tip: if you've got two folders with ambiguous names, you can pass more
words to trim down the results. This works for both the CLI and vim plugin. >
  $ z drone guard
  :Z drone guard

==============================================================================
2. Config                                                             *z-config*

Under the hood this just calls through to `z`, so (naturally) it requires `z`
to be installed somewhere. `z.vim` tries to be clever and can infer the
location if you're using the oh-my-zsh framework. Otherwise, you'll need to
provide the full path to the `z` library.

Configure this path by setting the `g:zcd#path` variable in your vimrc: >

  let g:zcd#path = expand('~/path/to/z/z.sh')

==============================================================================
3. Functions                                                       *z-functions*

This might appeal to advanced vim users. `z.vim` exposes a function you can
use in other scripts & commands.

zcd#FindMatches({search_term})                               *zcd#FindMatches()*

                Returns a list of directories matching {search_term}. Each
                result is a dictionary containing metadata: >

                  [{ 'frecency': 3.75, 'directory': '/absolute/path/' }]

<                No options are supported.

==============================================================================
4. Changelog                                                       *z-changelog*

0.1.0
Initial release

0.1.1 - March 6, 2019
Added:
- Expansion of special variables (e.g. `~`, `$HOME`, or `%:h`). Affects both
  command and programmatic usage.

==============================================================================
vim: ft=help tw=78:
